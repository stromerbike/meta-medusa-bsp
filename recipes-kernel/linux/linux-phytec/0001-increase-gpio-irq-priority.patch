From 9f7d49bfe12461764f586bcdc4e8d30c36f98e71 Mon Sep 17 00:00:00 2001
From: "tristan.ramseyer" <tristan.ramseyer@stromerbike.com>
Date: Tue, 3 Sep 2024 15:00:55 +0200
Subject: [PATCH] increase gpio irq priority

Patch by Stefan Eichenberger <eichest@gmail.com>

Upstream-Status: Inappropriate [stromer-specific]
Signed-off-by: tristan.ramseyer <tristan.ramseyer@stromerbike.com>
---
 drivers/gpio/gpiolib-sysfs.c |  2 +-
 fs/kernfs/file.c             | 37 ++++++++++++++++++++++++++++++++++++
 include/linux/kernfs.h       |  1 +
 3 files changed, 39 insertions(+), 1 deletion(-)

diff --git a/drivers/gpio/gpiolib-sysfs.c b/drivers/gpio/gpiolib-sysfs.c
index 12d853845bb8..8b7e9e37ff91 100644
--- a/drivers/gpio/gpiolib-sysfs.c
+++ b/drivers/gpio/gpiolib-sysfs.c
@@ -157,7 +157,7 @@ static irqreturn_t gpio_sysfs_irq(int irq, void *priv)
 {
 	struct gpiod_data *data = priv;
 
-	sysfs_notify_dirent(data->value_kn);
+	kernfs_notify_highpri(data->value_kn);
 
 	return IRQ_HANDLED;
 }
diff --git a/fs/kernfs/file.c b/fs/kernfs/file.c
index 180906c36f51..c26c58862180 100644
--- a/fs/kernfs/file.c
+++ b/fs/kernfs/file.c
@@ -1002,6 +1002,43 @@ void kernfs_notify(struct kernfs_node *kn)
 }
 EXPORT_SYMBOL_GPL(kernfs_notify);
 
+/**
+ * kernfs_notify - notify a kernfs file
+ * @kn: file to notify
+ *
+ * Notify @kn such that poll(2) on @kn wakes up.  Maybe be called from any
+ * context.
+ */
+void kernfs_notify_highpri(struct kernfs_node *kn)
+{
+	static DECLARE_WORK(kernfs_notify_work, kernfs_notify_workfn);
+	unsigned long flags;
+	struct kernfs_open_node *on;
+
+	if (WARN_ON(kernfs_type(kn) != KERNFS_FILE))
+		return;
+
+	/* kick poll immediately */
+	rcu_read_lock();
+	on = rcu_dereference(kn->attr.open);
+	if (on) {
+		atomic_inc(&on->event);
+		wake_up_interruptible(&on->poll);
+	}
+	rcu_read_unlock();
+
+	/* schedule work to kick fsnotify */
+	spin_lock_irqsave(&kernfs_notify_lock, flags);
+	if (!kn->attr.notify_next) {
+		kernfs_get(kn);
+		kn->attr.notify_next = kernfs_notify_list;
+		kernfs_notify_list = kn;
+		queue_work(system_highpri_wq, &kernfs_notify_work);
+	}
+	spin_unlock_irqrestore(&kernfs_notify_lock, flags);
+}
+EXPORT_SYMBOL_GPL(kernfs_notify_highpri);
+
 const struct file_operations kernfs_file_fops = {
 	.read_iter	= kernfs_fop_read_iter,
 	.write_iter	= kernfs_fop_write_iter,
diff --git a/include/linux/kernfs.h b/include/linux/kernfs.h
index 5a952d00ea15..8701b985f0ce 100644
--- a/include/linux/kernfs.h
+++ b/include/linux/kernfs.h
@@ -446,6 +446,7 @@ int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
 __poll_t kernfs_generic_poll(struct kernfs_open_file *of,
 			     struct poll_table_struct *pt);
 void kernfs_notify(struct kernfs_node *kn);
+void kernfs_notify_highpri(struct kernfs_node *kn);
 
 int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
 		     void *value, size_t size);
-- 
2.34.1

